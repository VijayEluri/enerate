#------------------------------------------------------------------------------
<c:include template="templates/license.jet"/>
#------------------------------------------------------------------------------

""" Defines adapters for implementing the ITreeNode interface.
"""

#------------------------------------------------------------------------------
#  Imports:
#------------------------------------------------------------------------------

from enthought.traits.api \
    import HasTraits, Property, Instance, adapts

from enthought.traits.ui.api \
    import View, Item, Group, ITreeNode, ITreeNodeAdapter, TreeEditor

from enthought.traits.ui.menu \
    import Action, Menu

<c:iterate select="$eClasses" var="eClass">
#------------------------------------------------------------------------------
#  "<c:get select="$eClass/@name"/>Adapter" class:
#------------------------------------------------------------------------------

class <c:get select="$eClass/@name"/>Adapter(ITreeNodeAdapter):
    """ Adapts a <c:get select="$eClass/@name"/> to implement the ITreeNode interface.
    """

    adapts(<c:get select="$eClass/@name"/>, ITreeNode)

    #--------------------------------------------------------------------------
    #  "ITreeNodeAdapter" interface:
    #--------------------------------------------------------------------------

    def allows_children(self):
        """ Returns whether this object can have children.
        """
        return True


    def has_children(self):
        """ Returns whether the object has children.
        """
        return (len(self.adaptee.Regions) > 0)


    def get_children(self):
        """ Gets the object's children.
        """
        return self.adaptee.Regions


    def get_children_id(self):
        """ Gets the object's children identifier.
        """
        return 'Regions'


    def append_child(self, child=None):
        """ Appends a child to the object's children.
        """
        if child is not None:
            self.adaptee.Regions.append(child)


    def confirm_delete(self):
        """ Checks whether a specified object can be deleted.

        Returns
        -------
        * **True** if the object should be deleted with no further prompting.
        * **False** if the object should not be deleted.
        * Anything else: Caller should take its default action (which might
          include prompting the user to confirm deletion).
        """
        return False


    def delete_child(self, index):
        """ Deletes a child at a specified index from the object's children.
        """
        if len(self.adaptee.Regions) > index:
            self.adaptee.pop(index)


    def when_children_replaced(self, listener, remove):
        """ Sets up or removes a listener for children being replaced on a
            specified object.
        """
        self.adaptee.on_trait_change(listener, 'Regions',
                              remove=remove, dispatch='ui')


    def get_label(self):
        """ Gets the label to display for a specified object.
        """
        return self.adaptee.name


    def get_menu(self):
        """ Returns the right-click context menu for an object.
        """
        return Menu(*[
            Action(name='Create Region',
                action='node.adapter.append_child',
            )]
        )


    def get_tooltip(self):
        """ Gets the tooltip to display for a specified object.
        """
        return "A geographical region of a power system network model."


    def get_icon(self, is_expanded):
        """ Returns the icon for a specified object.
        """
        return '<open>'


    def get_icon_path ( self ):
        """ Returns the path used to locate an object's icon.
        """
        return ''


    def get_name ( self ):
        """ Returns the name to use when adding a new object instance
            (displayed in the "New" submenu).
        """
        return ''


    def get_view ( self ):
        """ Gets the view to use when editing an object.
        """
        return None


    def can_rename(self):
        """ Returns whether the object's children can be renamed.
        """
        return True


    def can_copy(self):
        """ Returns whether the object's children can be copied.
        """
        return True


    def can_delete(self):
        """ Returns whether the object's children can be deleted.
        """
        return True


    def can_delete_me ( self ):
        """ Returns whether the object can be deleted.
        """
        return False


    def can_auto_open(self):
        """ Returns whether the object's children should be automatically
            opened.
        """
        return True


    def can_auto_close(self):
        """ Returns whether the object's children should be automatically
            closed.
        """
        return False


    def click ( self ):
        """ Handles an object being clicked.
        """
        pass


    def dclick ( self ):
        """ Handles an object being double-clicked.
        """
        pass
</c:iterate>

# EOF -------------------------------------------------------------------------
