#------------------------------------------------------------------------------
<c:include template="templates/license.jet"/>
#------------------------------------------------------------------------------

""" Defines adapters for implementing the ITreeNode interface.
"""

#------------------------------------------------------------------------------
#  Imports:
#------------------------------------------------------------------------------

from enthought.traits.api \
    import HasTraits, Property, Instance, adapts

from enthought.traits.ui.api \
    import View, Item, Group, ITreeNode, ITreeNodeAdapter, TreeEditor

from enthought.traits.ui.menu \
    import Action, Menu

<c:setVariable var="eSuper" select="$ePackage"/>
from <c:include template="templates/package_name.jet" passVariables="eSuper"/> import *
<c:iterate select="$ePackage//EPackage" var="eSuper">
from <c:include template="templates/package_name.jet" passVariables="eSuper"/> import *
</c:iterate>

#------------------------------------------------------------------------------
#  Constants:
#------------------------------------------------------------------------------

IMAGE_PATH = ""

<c:iterate select="$eClasses" var="eClass">
#------------------------------------------------------------------------------
#  "<c:get select="$eClass/@name"/>Adapter" class:
#------------------------------------------------------------------------------

class <c:get select="$eClass/@name"/>Adapter(ITreeNodeAdapter):
    """ Adapts a <c:get select="$eClass/@name"/> to implement the ITreeNode interface.
    """

    adapts(<c:get select="$eClass/@name"/>, ITreeNode)

    #--------------------------------------------------------------------------
    #  "ITreeNodeAdapter" interface:
    #--------------------------------------------------------------------------

    def allows_children(self):
        """ Returns whether this object can have children.
        """
        return <c:choose select="count( $eClass/eReferences[@many = 'true'] )">
        <c:when test="0">False</c:when>
        <c:otherwise>True</c:otherwise>
        </c:choose>


<c:if test="count( $eClass/eReferences[@many = 'true'] ) > 0">
    def has_children(self):
        """ Returns whether the object has children.
        """
        attrs = [<c:iterate select="$eClass/eReferences[@many = 'true']" var="eReference">"<c:get select="$eReference/@name"/>", </c:iterate>]
        children = [len( getattr(self.adaptee, attr) ) for attr in attrs]
        return ( max(children) > 0 )


    def get_children(self):
        """ Gets the object's children.
        """
        attrs = [<c:iterate select="$eClass/eReferences[@many = 'true']" var="eReference">"<c:get select="$eReference/@name"/>", </c:iterate>]
        children = [getattr(self.adaptee, attr) for attr in attrs]
        return [x for c in children for x in c]
</c:if>


    def when_children_replaced(self, listener, remove):
        """ Sets up or removes a listener for children being replaced on a
            specified object.
        """
        <c:iterate select="$eClass/eReferences[@many = 'true']" var="eReference">
        self.adaptee.on_trait_change(listener, '<c:get select="$eReference/@name"/>',
            remove=remove, dispatch='ui')
        </c:iterate>


    def when_children_changed ( self, listener, remove ):
        """ Sets up or removes a listener for children being changed on a
            specified object.
        """
        <c:iterate select="$eClass/eReferences[@many = 'true']" var="eReference">
        self.adaptee.on_trait_change(listener, '<c:get select="$eReference/@name"/>',
            remove=remove, dispatch='ui')
        </c:iterate>


    def get_label(self):
        """ Gets the label to display for a specified object.
        """
        if hasattr(self.adaptee, "name"):
            return self.adaptee.name
        else:
            return ""


#    def get_menu(self):
#        """ Returns the right-click context menu for an object.
#        """
#        return Menu(*[Action(name='Create',
#            action='node.adapter.append_child')])


    def get_tooltip(self):
        """ Gets the tooltip to display for a specified object.
        """
        return "<c:setVariable var="eAnnotated" select="$eClass"/><c:include template="templates/comment.jet" passVariables="eAnnotated"/>"


    def get_icon(self, is_expanded):
        """ Returns the icon for a specified object.
        """
        return <c:choose select="count( $eClass/eReferences[@many = 'true'] )">
        <c:when test="0">'<item>'</c:when>
        <c:otherwise>'<open>'</c:otherwise>
        </c:choose>


    def get_icon_path ( self ):
        """ Returns the path used to locate an object's icon.
        """
        return IMAGE_PATH


    def get_name ( self ):
        """ Returns the name to use when adding a new object instance
            (displayed in the "New" submenu).
        """
        return '<c:get select="$eClass/@name"/>'


    def get_view ( self ):
        """ Gets the view to use when editing an object.
        """
        return None


    def can_rename(self):
        """ Returns whether the object's children can be renamed.
        """
        return True


    def can_copy(self):
        """ Returns whether the object's children can be copied.
        """
        return True


#    def can_delete(self):
#        """ Returns whether the object's children can be deleted.
#        """
#        return True


    def can_delete_me ( self ):
        """ Returns whether the object can be deleted.
        """
        return True


    def confirm_delete(self):
        """ Checks whether a specified object can be deleted.

          Returns
          -------
          * **True** if the object should be deleted with no further prompting.
          * **False** if the object should not be deleted.
          * Anything else: Caller should take its default action (which might
            include prompting the user to confirm deletion).
        """
        return True


#    def delete_child(self, index):
#        """ Deletes a child at a specified index from the object's children.
#        """
#        pass


    def can_add ( self, add_object ):
        """ Returns whether a given object is droppable on the node.
        """
        valid = (<c:iterate select="$eClass/eReferences[@many = 'true']" var="eReference"><c:get select="$eReference/eReferenceType/@name"/>, </c:iterate>)
        return isinstance(add_object, valid)


    def can_insert ( self ):
        """ Returns whether the object's children can be inserted (vs.
            appended).
        """
        return <c:choose select="count( $eClass/eReferences[@many = 'true'] )">
        <c:when test="0">False</c:when>
        <c:otherwise>True</c:otherwise>
        </c:choose>


    def append_child ( self, child ):
        """ Appends a child to the object's children.
        """
        pass


    def insert_child ( self, index, child ):
        """ Inserts a child into the object's children.
        """
        pass


    def get_add ( self ):
        """ Returns the list of classes that can be added to the object.
        """
        return [<c:iterate select="$eClass/eReferences[@many = 'true']" var="eReference">"<c:get select="$eReference/@name"/>", </c:iterate>]


    def dclick ( self ):
        """ Handles an object being double-clicked.
        """
        self.adaptee.edit_traits(kind="livemodal")
</c:iterate>

# EOF -------------------------------------------------------------------------
